local cur = os.clock()

local rsRunner

for i,v in pairs(getconnections(game:GetService("RunService").RenderStepped)) do
    if v.Function then
        local taskManager = debug.getupvalues(v.Function)[1]
        if type(taskManager) == "table" and rawget(taskManager, "_taskContainers") then
            rsRunner = taskManager
            break
        end
    end
end

local charStep = next(rsRunner._taskContainers.char.tasks).task


local pf = {}
pf.char = debug.getupvalue(charStep, 3)
pf.camera = debug.getupvalue(charStep, 2)
pf.network = debug.getupvalue(pf.char.setmovementmode, 20)
pf.hud = debug.getupvalue(pf.char.setmovementmode, 10)
pf.gamelogic = debug.getupvalue(pf.char.setsprint, 1)
pf.replication = debug.getupvalue(pf.hud.attachflag, 1)

do
    local receive = getconnections(debug.getupvalue(pf.network.send, 1).OnClientEvent)[1].Function
    pf.networkCache = debug.getupvalue(receive, 1)
    
    local tracker = debug.getupvalue(pf.char.animstep, 5)
    pf.trajectory = debug.getupvalue(tracker, 10)
end

local fakeBarrel = Instance.new("Part")
fakeBarrel.CanCollide = false
fakeBarrel.Size = Vector3.new(1,1,1)
fakeBarrel.Transparency = 1
fakeBarrel.Parent = workspace

local lp = game:GetService("Players").LocalPlayer

local currentgun = pf.gamelogic.currentgun
setmetatable(pf.gamelogic, {
    __index = function(t,k)
        if k == "currentgun" then
            return currentgun
        end
    end,
    __newindex = function(t,k,v)
        if k == "currentgun" then
            currentgun = v
            
            if v ~= nil and v.step ~= nil then
                local gunStep = debug.getupvalues(v.step)
                gunStep = gunStep[#gunStep]
                
                if type(gunStep) ~= "function" then
                    return    
                end
                
                debug.setupvalue(gunStep, 38, fakeBarrel)
                
                currentgun.data.choke = false
                currentgun.data.hipchoke = false
                currentgun.data.aimchoke = false
            end
        end
    end
})
pf.gamelogic.currentgun = nil

rawset(next(rsRunner._taskContainers.char.tasks), "task", function(...)
    local nearestDist = math.huge
    local nearest
                        
    for o,p in pairs(game:GetService("Players"):GetPlayers()) do
        if pf.hud:isplayeralive(p) and p.TeamColor ~= lp.TeamColor then
            local _, headPos = pf.replication.getupdater(p).getpos()
                                
            local viewportHead = pf.camera.currentcamera:WorldToViewportPoint(headPos)
                                
            local distFromCursor = (Vector2.new(viewportHead.x, viewportHead.y) - (pf.camera.currentcamera.ViewportSize / 2)).magnitude
                                
            if distFromCursor < nearestDist then
                nearestDist = distFromCursor
                nearest = p
            end
        end
    end
    
    if nearest and currentgun and currentgun.barrel then
        local _, headPos = pf.replication.getupdater(nearest).getpos()
        
        local traj = pf.trajectory(currentgun.barrel.Position, Vector3.new(0, -196.2, 0), headPos, currentgun.data.bulletspeed)
        
        fakeBarrel.CFrame = CFrame.lookAt(currentgun.barrel.Position, currentgun.barrel.Position + traj.unit)
    end
    
    return charStep(...)
end)

for i,v in pairs(pf.networkCache) do
    local consts = debug.getconstants(v)
    if consts[24] == " : " then
        v({Name = "gamign", TeamColor = BrickColor.White()}, "loaded! (took " .. math.round((os.clock() - cur) * 1000000) .. " ns)")
    end
end